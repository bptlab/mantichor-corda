package com.ID.contract

import com.ID.state.IDState
import net.corda.core.contracts.CommandData
import net.corda.core.contracts.Contract
import net.corda.core.contracts.requireSingleCommand
import net.corda.core.contracts.requireThat
import net.corda.core.transactions.LedgerTransaction

class IDContract : Contract {

    override fun verify(tx: LedgerTransaction) {
        val groups = tx.groupStates(State::withoutOwner)
        val command = tx.commands.requireSingleCommand<IDContract.Commands>()
        for((inputs, outputs, _) in groups) {
            when(command.value) {
                HANDLECOMMANDS
            }
        }

    }

    interface Commands : CommandData {
        class AdditionalCommands : Commands
    }

    AdditionalFunctions
}